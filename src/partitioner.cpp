#include "globals.h"
#include "partitioner.h"
#include "display.h"
#include "mykeyboard.h"
#include "esp_heap_caps.h"

// Define o tamanho da partição
#define PARTITION_SIZE 4096

// Using "buff[4096]" to store and write the partitions
#if defined(CARDPUTER) || defined(STICK_C_PLUS2)
const uint8_t def_part[256] PROGMEM = { // default partition scheme(App, FAT and SPIFFS)
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64, 
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x61, 0x70, 0x70, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x47, 0x00, 0x61, 0x70, 0x70, 0x31, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x81, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x08, 0x00, 0x76, 0x66, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x82, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x73, 0x70, 0x69, 0x66, 
    0x66, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x03, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x63, 0x6F, 0x72, 0x65, 
    0x64, 0x75, 0x6D, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xC3, 0x3D, 0x2D, 0x69, 0xE8, 0x77, 0x2F, 0xAF, 0x17, 0x09, 0xF2, 0x90, 0x47, 0xAB, 0xE0, 0x63,
};

const uint8_t doom[160] = { // 6Mb app partition
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64, 
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x61, 0x70, 0x70, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x60, 0x00, 0x61, 0x70, 0x70, 0x31, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xA5, 0x2A, 0x7D, 0x65, 0x31, 0xF0, 0x0B, 0x38, 0x72, 0x1F, 0x33, 0x37, 0x91, 0x49, 0xB6, 0x98,
};

const uint8_t uiflow2[224] PROGMEM = { // uiflow partition scheme, APP, sys(FAT) and vfs(FAT)
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64,
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x61, 0x70, 0x70, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x37, 0x00, 0x61, 0x70, 0x70, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAA, 0x50, 0x01, 0x81, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x10, 0x00, 0x73, 0x79, 0x73, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xAA, 0x50, 0x01, 0x81, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x19, 0x00, 0x76, 0x66, 0x73, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xD1, 0xD5, 0x8F, 0xC3, 0xB0, 0x82, 0x0F, 0x40, 0xD3, 0x17, 0xD4, 0x77, 0xE3, 0x4B, 0x74, 0xA6,
};

#elif defined(STICK_C_PLUS)

const uint8_t def_part[192] = { // 4Mb app partition
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64,
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x74, 0x65, 0x73, 0x74, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x26, 0x00, 0x61, 0x70, 0x70, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x82, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x73, 0x70, 0x69, 0x66, 
    0x66, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x4B, 0xF5, 0x09, 0xF6, 0xEB, 0x79, 0xF1, 0x66, 0x5B, 0xDC, 0xCF, 0xB3, 0xFF, 0x0E, 0x6B, 0x99,
};

const uint8_t orca[192] = { // 4Mb app partition
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64, 
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x74, 0x65, 0x73, 0x74, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x61, 0x70, 0x70, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x82, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x70, 0x69, 0x66, 
    0x66, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xE5, 0x00, 0x17, 0x0A, 0x68, 0x12, 0x14, 0xEA, 0xFE, 0x89, 0x1E, 0x0F, 0x92, 0x04, 0x16, 0x1A,
};
#elif defined(CORE) || defined(CORE2)
  const uint8_t def_part[288] PROGMEM = {
    0xAA, 0x50, 0x01, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x6E, 0x76, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x6F, 0x74, 0x61, 0x64, 
    0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x74, 0x65, 0x73, 0x74, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x70, 0x00, 0x61, 0x70, 0x70, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x81, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x10, 0x00, 0x73, 0x79, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x81, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x76, 0x66, 0x73, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x82, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x73, 0x70, 0x69, 0x66, 
    0x66, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xAA, 0x50, 0x01, 0x03, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x63, 0x6F, 0x72, 0x65, 
    0x64, 0x75, 0x6D, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEB, 0xEB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0x58, 0x91, 0x16, 0xD2, 0xD2, 0xD5, 0x6B, 0x08, 0xDD, 0x79, 0x48, 0xA5, 0xFD, 0xB6, 0x4E, 0xE8,
  };
#endif

void resetBuffer() {
    for(int i=0; i<sizeof(buff); i++) buff[i] = 0xFF;
}


// Função para apagar e escrever na região de memória flash
bool IRAM_ATTR partitionSetter(const uint8_t* scheme, size_t scheme_size) {
    uint8_t* buffer = (uint8_t*)heap_caps_malloc(PARTITION_SIZE, MALLOC_CAP_INTERNAL);
    if (buffer == NULL) {
        ESP_LOGE("FLASH", "Failed to allocate buffer in DRAM");
        return false;
    }

    // Preencher o buffer com 0xFF
    memset(buffer, 0xFF, PARTITION_SIZE);

    // Copiar o esquema de partição para o buffer
    memcpy(buffer, scheme, scheme_size);

    esp_err_t err;


    // Apagar a região de memória flash
    err = spi_flash_erase_range(0x8000, PARTITION_SIZE);
    if (err != ESP_OK) {
        ESP_LOGE("FLASH", "Failed to erase flash region (0x%x)", err);
        heap_caps_free(buffer);
        return false;
    }

    // Escrever o buffer na memória flash
    err = esp_flash_write(NULL, buffer, 0x8000, PARTITION_SIZE);
    if (err != ESP_OK) {
        ESP_LOGE("FLASH", "Failed to write to flash (0x%x)", err);
        heap_caps_free(buffer);
        return false;
    }

    heap_caps_free(buffer);

    return true;
}

void partitioner() {
    int partition = 0;
    const uint8_t* data = nullptr;
    size_t data_size = 0;

    // Opções de partição
    options = {
        {"Default", [&](){ partition = 0; }},
        {"Doom", [&](){ partition = 1; }},
        {"UiFlow2", [&](){ partition = 2; }},
    };
    delay(200);
    loopOptions(options);

    switch(partition) {
        case 0: data = def_part;
                data_size = sizeof(def_part);
                break;
      #if defined(CARDPUTER) || defined(STICK_C_PLUS2)
        case 1: data = doom;
                data_size = sizeof(doom);
                break;
        case 2: data = uiflow2;
                data_size = sizeof(uiflow2);
                break;
      #elif defined(STICK_C_PLUS)
        case 1: data = orca;
                data_size = sizeof(orca);
                break;
      #endif
        default: data = def_part;
                data_size = sizeof(def_part);
    }

    if (!partitionSetter(data, data_size)) {
        Serial.println("Error when running partitionSetter function");
        displayRedStripe("Partitioning Error");
        while (!checkSelPress()) yield();
    }

    displayRedStripe("Hard Restart needed");
    while (!checkSelPress()) yield();
    while (checkSelPress()) yield();
    displayRedStripe("Turn OFF and ON");
    while (!checkSelPress()) yield();
    while (checkSelPress()) yield();
}

void partList() {
      // Obtemos a lista de partições
  const esp_partition_t* partition;
  esp_partition_iterator_t it = esp_partition_find(ESP_PARTITION_TYPE_ANY, ESP_PARTITION_SUBTYPE_ANY, NULL);

  if (it != NULL) {
    Serial.println("Partições encontradas:");
    String txt="";
    while (it != NULL) {
      partition = esp_partition_get(it);
      Serial.print("Nome: ");
      Serial.println(partition->label);
      Serial.print("Tipo: ");
      Serial.print(partition->type, HEX);
      Serial.print(" (");
      switch (partition->type) {
        case ESP_PARTITION_TYPE_APP:
          Serial.print("Aplicação");
          break;
        case ESP_PARTITION_TYPE_DATA:
          Serial.print("Dados");
          break;
        default:
          Serial.print("Desconhecido");
          break;
      }
      Serial.println(")");
      Serial.print("Subtipo: ");
      Serial.print(partition->subtype, HEX);
      Serial.print(" (");
      switch (partition->subtype) {
        case ESP_PARTITION_SUBTYPE_APP_FACTORY:
          Serial.print("Fábrica");
          break;
        case ESP_PARTITION_SUBTYPE_APP_OTA_0:
        case ESP_PARTITION_SUBTYPE_APP_OTA_1:
          Serial.print("OTA");
          txt+="OTA,";
          break;
        case ESP_PARTITION_SUBTYPE_APP_TEST:
          Serial.print("Teste");
          break;
        case ESP_PARTITION_SUBTYPE_DATA_PHY:
          Serial.print("PHY");
          break;
        case ESP_PARTITION_SUBTYPE_DATA_NVS:
          Serial.print("NVS");
          break;
        case ESP_PARTITION_SUBTYPE_DATA_COREDUMP:
          Serial.print("Core Dump");
          break;
        case ESP_PARTITION_SUBTYPE_DATA_ESPHTTPD:
          Serial.print("ESP HTTPD");
          break;
        case ESP_PARTITION_SUBTYPE_DATA_FAT:
          Serial.print("FAT");
          txt+="FAT,";
          break;
        case ESP_PARTITION_SUBTYPE_DATA_SPIFFS:
          Serial.print("SPIFFS");
          txt+="SPIFFs";
          break;
        default:
          Serial.print("Desconhecido");
          break;
      }
      Serial.println(")");
      Serial.print("Endereço: 0x");
      Serial.println(partition->address, HEX);
      Serial.print("Tamanho: 0x");
      Serial.println(partition->size, HEX);
      Serial.println();
      
      it = esp_partition_next(it);
    }
    esp_partition_iterator_release(it);

    displayRedStripe(txt);
    while(!checkSelPress()) yield();
    while(checkSelPress()) yield();    
  } else {
    Serial.println("Nenhuma partição encontrada.");
  }
  

}